{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "This template launches Windows Server 2016 with root volume of 50 GB and installs docker",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "Amazon EC2 instance type",
      "Type" : "String",
      "Default" : "t2.medium"
    }
  },

  "Resources" : {
    "MyWindowsInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP and RDP",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "3389", "ToPort" : "3389", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },

    "MyWindowsInstance": {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.MyWindowsInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
                                                 " -r MyWindowsInstance",
                                                 " --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]}
              },
			  "C:\\Docker\\install.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
					  "invoke-webrequest -UseBasicparsing -Outfile docker-17.06.2-ee-7.zip https://download.docker.com/components/engine/windows-server/17.06/docker-17.06.2-ee-7.zip \n",
                      "Expand-Archive docker-17.06.2-ee-7.zip -DestinationPath $Env:ProgramFiles \n",
                      "Remove-Item -Force docker-17.06.2-ee-7.zip \n",
                      "$null = Install-WindowsFeature containers \n",
					  "$env:path += \";$env:ProgramFiles\\docker\" \n",
                      "$newPath = \"$env:ProgramFiles\\docker;\" + [Environment]::GetEnvironmentVariable(\"PATH\",[EnvironmentVariableTarget]::Machine) \n",
					  "[Environment]::SetEnvironmentVariable(\"PATH\", $newPath,[EnvironmentVariableTarget]::Machine) \n",
					  "dockerd --register-service"
                    ]
                  ]
                }			  
			  }
            },
            "commands" : {
              "1-install" : {
                "command" : "powershell.exe -ExecutionPolicy Unrestricted C:\\Docker\\install.ps1"
              },
			  "2-restart" : {
				"command": "powershell.exe -Command Restart-Computer",
				"waitAfterCompletion": "forever"              
			  },
			  "3-run" : {
				"command": "docker container run hello-world:nanoserver"
			  }
            },
            
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "InstanceType" : { "Ref" : "InstanceType" },
        "ImageId" : "ami-09e99ecc6126d3d36",
        "SecurityGroups" : [ {"Ref" : "MyWindowsInstanceSecurityGroup"} ],
        "KeyName" : { "Ref" : "KeyName" },
		"BlockDeviceMappings" : [{
		  "DeviceName"  : "/dev/sda1",
		  "Ebs" : { "VolumeSize" : "50" }
		 }],		
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "<script>\n",

          "cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" }, 
          " -r MyWindowsInstance",
          " --region ", { "Ref" : "AWS::Region" }, "\n",
 
		  "cfn-signal.exe -e %ERRORLEVEL% ", { "Fn::Base64" : { "Ref" : "MyWindowsInstanceWaitHandle" }}, "\n",
		  
          "</script>"
          ]]}}
        }
    },

    "MyWindowsInstanceWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "MyWindowsInstanceWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "MyWindowsInstance",
      "Properties" : {
        "Handle" : {"Ref" : "MyWindowsInstanceWaitHandle"},
        "Timeout" : "3600"
      }
    }
  }
}